   1              	 .cpu cortex-m0
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,4
   9              	 .eabi_attribute 34,0
  10              	 .eabi_attribute 18,4
  11              	 .file "smack_sl.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.example_handler,"ax",%progbits
  16              	 .align 1
  17              	 .global example_handler
  18              	 .arch armv6s-m
  19              	 .syntax unified
  20              	 .code 16
  21              	 .thumb_func
  22              	 .fpu softvfp
  24              	example_handler:
  25              	.LFB43:
  26              	 .file 1 "C:/OpenSesame/smack_sl/src/smack_sl.c"
   1:C:/OpenSesame/smack_sl/src\smack_sl.c **** /* ============================================================================
   2:C:/OpenSesame/smack_sl/src\smack_sl.c **** ** Copyright (c) 2021 Infineon Technologies AG
   3:C:/OpenSesame/smack_sl/src\smack_sl.c **** **               All rights reserved.
   4:C:/OpenSesame/smack_sl/src\smack_sl.c **** **               www.infineon.com
   5:C:/OpenSesame/smack_sl/src\smack_sl.c **** ** ============================================================================
   6:C:/OpenSesame/smack_sl/src\smack_sl.c **** **
   7:C:/OpenSesame/smack_sl/src\smack_sl.c **** ** ============================================================================
   8:C:/OpenSesame/smack_sl/src\smack_sl.c **** ** Redistribution and use of this software only permitted to the extent
   9:C:/OpenSesame/smack_sl/src\smack_sl.c **** ** expressly agreed with Infineon Technologies AG.
  10:C:/OpenSesame/smack_sl/src\smack_sl.c **** ** ============================================================================
  11:C:/OpenSesame/smack_sl/src\smack_sl.c **** *
  12:C:/OpenSesame/smack_sl/src\smack_sl.c **** */
  13:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
  14:C:/OpenSesame/smack_sl/src\smack_sl.c **** /** @file     smack_sl.c
  15:C:/OpenSesame/smack_sl/src\smack_sl.c ****  *  @brief    holds smack_sl() which serves as the entry point for the application code after all t
  16:C:/OpenSesame/smack_sl/src\smack_sl.c ****  */
  17:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
  18:C:/OpenSesame/smack_sl/src\smack_sl.c **** // standard libs
  19:C:/OpenSesame/smack_sl/src\smack_sl.c **** // included by core_cm0.h: #include <stdint.h>
  20:C:/OpenSesame/smack_sl/src\smack_sl.c **** #include "core_cm0.h"
  21:C:/OpenSesame/smack_sl/src\smack_sl.c **** #include <stdbool.h>
  22:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
  23:C:/OpenSesame/smack_sl/src\smack_sl.c **** // Smack ROM lib
  24:C:/OpenSesame/smack_sl/src\smack_sl.c **** #include "rom_lib.h"
  25:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
  26:C:/OpenSesame/smack_sl/src\smack_sl.c **** // Smack NVM lib
  27:C:/OpenSesame/smack_sl/src\smack_sl.c **** #include "sys_tim_lib.h"
  28:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
  29:C:/OpenSesame/smack_sl/src\smack_sl.c **** // smack_sl project
  30:C:/OpenSesame/smack_sl/src\smack_sl.c **** #include "smack_sl.h"
  31:C:/OpenSesame/smack_sl/src\smack_sl.c **** #include "smack_dataexchange.h"
  32:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
  33:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
  34:C:/OpenSesame/smack_sl/src\smack_sl.c **** #ifndef wait_about_1ms
  35:C:/OpenSesame/smack_sl/src\smack_sl.c **** #define WAIT_ABOUT_1MS   0x8000   //!< clock tick constant ~1ms @ 28MHz
  36:C:/OpenSesame/smack_sl/src\smack_sl.c **** #endif
  37:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
  38:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
  39:C:/OpenSesame/smack_sl/src\smack_sl.c **** /* NDEF tag defined by user.
  40:C:/OpenSesame/smack_sl/src\smack_sl.c ****  * To activate this tag, set the field "tag_type_2_ptr" in aparams.
  41:C:/OpenSesame/smack_sl/src\smack_sl.c ****  */
  42:C:/OpenSesame/smack_sl/src\smack_sl.c **** const uint8_t smack_sl_tag[] =                    /**< [0x3a0:0x3ff] 96 Bytes Tag2 area          */
  43:C:/OpenSesame/smack_sl/src\smack_sl.c **** {
  44:C:/OpenSesame/smack_sl/src\smack_sl.c ****     0x05, 0xc0, 0xbe, 0xef,      /**< BLOCK0 UID0,1,2,3,4 */
  45:C:/OpenSesame/smack_sl/src\smack_sl.c ****     0xde, 0xad, 0x00, 0x00,      /**< BLOCK1 UID5,6,7,0x00 */
  46:C:/OpenSesame/smack_sl/src\smack_sl.c ****     0xff, 0xff, 0xff, 0xff,      /**< BLOCK2 Internal Lock  Byte0 and Byte1 are relevant 0xff means
  47:C:/OpenSesame/smack_sl/src\smack_sl.c ****     0xE1,                        /**< Capability Container CC_0 Magic Number fixed to 0xE1 for type
  48:C:/OpenSesame/smack_sl/src\smack_sl.c ****     0x10,                        /**< Capability Container CC_1 Mapping version default 0x10 */
  49:C:/OpenSesame/smack_sl/src\smack_sl.c ****     0x0b,                        /**< Capability Container CC_2 size 22 Blocks --> 88 Bytes / 8 = 1
  50:C:/OpenSesame/smack_sl/src\smack_sl.c ****     0x0f,                        /**< Capability Container CC_3 Access Conditions , 0x0f  for read 
  51:C:/OpenSesame/smack_sl/src\smack_sl.c ****     0x03, 0x4f, 0xd1, 0x01,      /**< BLOCK4  NDEF, Length, MB + ME + Well known, ID length */
  52:C:/OpenSesame/smack_sl/src\smack_sl.c ****     0x4b, 0x54, 0x02,  'e',      /**< BLOCK5  Payload lenth, ID, language length, lang0 */
  53:C:/OpenSesame/smack_sl/src\smack_sl.c ****     'n',   'I',  'n',  'f',      /**< BLOCK6  lang1, payload .... */
  54:C:/OpenSesame/smack_sl/src\smack_sl.c ****     'i',   'n',  'e',  'o',      /**< BLOCK7  */
  55:C:/OpenSesame/smack_sl/src\smack_sl.c ****     'n',   ' ',  'T',  'e',      /**< BLOCK8  */
  56:C:/OpenSesame/smack_sl/src\smack_sl.c ****     'c',   'h',  'n',  'o',      /**< BLOCK9  */
  57:C:/OpenSesame/smack_sl/src\smack_sl.c ****     'l',   'o',  'g',  'i',      /**< BLOCK10 */
  58:C:/OpenSesame/smack_sl/src\smack_sl.c ****     'e',   's',  ' ',  'A',      /**< BLOCK11 */
  59:C:/OpenSesame/smack_sl/src\smack_sl.c ****     'G',   ' ',  ' ',  'N',      /**< BLOCK12 */
  60:C:/OpenSesame/smack_sl/src\smack_sl.c ****     'G',   'C',  '1',  '0',      /**< BLOCK13 */
  61:C:/OpenSesame/smack_sl/src\smack_sl.c ****     '8',   '0',  ' ',  ' ',      /**< BLOCK14 */
  62:C:/OpenSesame/smack_sl/src\smack_sl.c ****     'S',   'm',  'A',  'c',      /**< BLOCK15 */
  63:C:/OpenSesame/smack_sl/src\smack_sl.c ****     'K',   ' ',  ' ',  '0',      /**< BLOCK16 */
  64:C:/OpenSesame/smack_sl/src\smack_sl.c ****     '5',   'C',  '0',  'B',      /**< BLOCK17 */
  65:C:/OpenSesame/smack_sl/src\smack_sl.c ****     'E',   'E',  'F',  'D',      /**< BLOCK18 */
  66:C:/OpenSesame/smack_sl/src\smack_sl.c ****     'E',   'A',  'D',  '0',      /**< BLOCK19 */
  67:C:/OpenSesame/smack_sl/src\smack_sl.c ****     '0',   '0',  '0',  ' ',      /**< BLOCK20 */
  68:C:/OpenSesame/smack_sl/src\smack_sl.c ****     ' ',   'V',  '4',  '.',      /**< BLOCK21 */
  69:C:/OpenSesame/smack_sl/src\smack_sl.c ****     '0',   '.',  '1',  ' ',      /**< BLOCK22 */
  70:C:/OpenSesame/smack_sl/src\smack_sl.c ****     '(',   'N',  'V',  'M',      /**< BLOCK23 */
  71:C:/OpenSesame/smack_sl/src\smack_sl.c ****     ')',  0xfe, 0xff, 0xff,      /**< BLOCK24 */
  72:C:/OpenSesame/smack_sl/src\smack_sl.c ****     0xff, 0xff, 0xff, 0xff       /**< BLOCK25 not used */
  73:C:/OpenSesame/smack_sl/src\smack_sl.c **** };
  74:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
  75:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
  76:C:/OpenSesame/smack_sl/src\smack_sl.c **** // Globals:
  77:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
  78:C:/OpenSesame/smack_sl/src\smack_sl.c **** // Offer a counter for external access
  79:C:/OpenSesame/smack_sl/src\smack_sl.c **** uint32_t sl_counter;
  80:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
  81:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
  82:C:/OpenSesame/smack_sl/src\smack_sl.c **** /** _nvm_start() is the main() routine of the application code:
  83:C:/OpenSesame/smack_sl/src\smack_sl.c ****  * - when building the image (rom or ram), it is called by Reset_Handler() (see startup_smack.c) af
  84:C:/OpenSesame/smack_sl/src\smack_sl.c ****  * - when building and running the unit tests, it is not called, as far as I know, it is not subjec
  85:C:/OpenSesame/smack_sl/src\smack_sl.c ****  * - when building and running integration and/or system tests, it is called by sc_main() upon simu
  86:C:/OpenSesame/smack_sl/src\smack_sl.c ****  * This is also the reason of why it is called _start() and not main(): The VP has a higher layer m
  87:C:/OpenSesame/smack_sl/src\smack_sl.c ****  * calls sc_main() and _start(). Having two main's will fail when linking the VP executable.
  88:C:/OpenSesame/smack_sl/src\smack_sl.c ****  *
  89:C:/OpenSesame/smack_sl/src\smack_sl.c ****  * @note _start() cannot be made static, it is referenced by startup_smack.c and also by the interf
  90:C:/OpenSesame/smack_sl/src\smack_sl.c ****  * to the Virtual Prototype. But linting does not know about such external references. The default
  91:C:/OpenSesame/smack_sl/src\smack_sl.c ****  * approach to solve is to add '//lint -e765'. Our linter is plain old, we don't get a new one than
  92:C:/OpenSesame/smack_sl/src\smack_sl.c ****  * the application owner from IT and it has a bug which renders -e765 useless. The only option we h
  93:C:/OpenSesame/smack_sl/src\smack_sl.c ****  * is to suppress the warning in au_misra2_fixes.lnt
  94:C:/OpenSesame/smack_sl/src\smack_sl.c ****  *
  95:C:/OpenSesame/smack_sl/src\smack_sl.c ****  * @return nothing
  96:C:/OpenSesame/smack_sl/src\smack_sl.c ****  */
  97:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
  98:C:/OpenSesame/smack_sl/src\smack_sl.c **** void _nvm_start(void);
  99:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 100:C:/OpenSesame/smack_sl/src\smack_sl.c **** // Example for application specific interrupt service routine
 101:C:/OpenSesame/smack_sl/src\smack_sl.c **** //    Function pointer to this routine must be registered in aparam.c file
 102:C:/OpenSesame/smack_sl/src\smack_sl.c **** //    The routine will serve the sys_tick interrupts and will increment a variable
 103:C:/OpenSesame/smack_sl/src\smack_sl.c **** //    which can be easily monitored by the attached debugger
 104:C:/OpenSesame/smack_sl/src\smack_sl.c **** static uint32_t example_counter = 0;
 105:C:/OpenSesame/smack_sl/src\smack_sl.c **** void example_handler(void)
 106:C:/OpenSesame/smack_sl/src\smack_sl.c **** {
  27              	 .loc 1 106 1 view-0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
 107:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 108:C:/OpenSesame/smack_sl/src\smack_sl.c ****     example_counter++;
  32              	 .loc 1 108 5 view .LVU1
  33              	 .loc 1 108 20 is_stmt 0 view .LVU2
  34 0000 024A     	 ldr r2,.L2
 109:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 110:C:/OpenSesame/smack_sl/src\smack_sl.c **** }
  35              	 .loc 1 110 1 view .LVU3
  36              	 
 108:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
  37              	 .loc 1 108 20 view .LVU4
  38 0002 1368     	 ldr r3,[r2]
  39 0004 0133     	 adds r3,r3,#1
  40 0006 1360     	 str r3,[r2]
  41              	 .loc 1 110 1 view .LVU5
  42 0008 7047     	 bx lr
  43              	.L3:
  44 000a C046     	 .align 2
  45              	.L2:
  46 000c 00000000 	 .word .LANCHOR0
  47              	 .cfi_endproc
  48              	.LFE43:
  50              	 .section .text.hardfault_handler,"ax",%progbits
  51              	 .align 1
  52              	 .global hardfault_handler
  53              	 .syntax unified
  54              	 .code 16
  55              	 .thumb_func
  56              	 .fpu softvfp
  58              	hardfault_handler:
  59              	.LFB44:
 111:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 112:C:/OpenSesame/smack_sl/src\smack_sl.c **** // In case of a Hardfault, spin in a loop for a while before resetting so that a debugger may conne
 113:C:/OpenSesame/smack_sl/src\smack_sl.c **** void hardfault_handler(void)
 114:C:/OpenSesame/smack_sl/src\smack_sl.c **** {
  60              	 .loc 1 114 1 is_stmt 1 view-0
  61              	 .cfi_startproc
  62              	 
  63              	 
  64              	 
 115:C:/OpenSesame/smack_sl/src\smack_sl.c ****     uint32_t cnt = 30000000;
  65              	 .loc 1 115 5 view .LVU7
  66              	.LVL0:
 116:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 117:C:/OpenSesame/smack_sl/src\smack_sl.c ****     while (cnt--)
  67              	 .loc 1 117 5 view .LVU8
  68              	 .loc 1 117 11 is_stmt 0 view .LVU9
  69 0000 034B     	 ldr r3,.L7
  70              	.LVL1:
  71              	.L5:
  72              	 .loc 1 117 11 is_stmt 1 view .LVU10
  73              	 .loc 1 117 11 is_stmt 0 view .LVU11
  74 0002 013B     	 subs r3,r3,#1
  75              	.LVL2:
  76              	 .loc 1 117 11 view .LVU12
  77 0004 002B     	 cmp r3,#0
  78 0006 00D1     	 bne .L6
 118:C:/OpenSesame/smack_sl/src\smack_sl.c ****     {
 119:C:/OpenSesame/smack_sl/src\smack_sl.c ****         __NOP();
 120:C:/OpenSesame/smack_sl/src\smack_sl.c ****     }
 121:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 122:C:/OpenSesame/smack_sl/src\smack_sl.c **** }
  79              	 .loc 1 122 1 view .LVU13
  80              	 
  81 0008 7047     	 bx lr
  82              	.L6:
  83              	.LVL3:
 119:C:/OpenSesame/smack_sl/src\smack_sl.c ****     }
  84              	 .loc 1 119 9 is_stmt 1 view .LVU14
  85              	 .syntax divided
  86              	
  87 000a C046     	 nop
  88              	
  89              	 .thumb
  90              	 .syntax unified
  91 000c F9E7     	 b .L5
  92              	.L8:
  93 000e C046     	 .align 2
  94              	.L7:
  95 0010 81C3C901 	 .word 30000001
  96              	 .cfi_endproc
  97              	.LFE44:
  99              	 .section .text._nvm_start,"ax",%progbits
 100              	 .align 1
 101              	 .global _nvm_start
 102              	 .syntax unified
 103              	 .code 16
 104              	 .thumb_func
 105              	 .fpu softvfp
 107              	_nvm_start:
 108              	.LFB45:
 123:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 124:C:/OpenSesame/smack_sl/src\smack_sl.c **** // Start of the application program
 125:C:/OpenSesame/smack_sl/src\smack_sl.c **** void _nvm_start(void)
 126:C:/OpenSesame/smack_sl/src\smack_sl.c **** {
 109              	 .loc 1 126 1 view-0
 110              	 .cfi_startproc
 111              	 
 112              	 
 113              	 
 127:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 128:C:/OpenSesame/smack_sl/src\smack_sl.c ****     // *******************Test of hb_ctrl; LED Blinking at HB Pins *********************
 129:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 130:C:/OpenSesame/smack_sl/src\smack_sl.c ****     // bring the 4 bit output of hb_ctrl to GPIO 11 downto 8
 131:C:/OpenSesame/smack_sl/src\smack_sl.c ****     uint32_t time  = 511;  // Controls the Switch Frequenz, The Systick will be loaded by multiples
 114              	 .loc 1 131 5 view .LVU16
 115              	.LVL4:
 132:C:/OpenSesame/smack_sl/src\smack_sl.c ****     uint32_t count = 300;
 116              	 .loc 1 132 5 view .LVU17
 133:C:/OpenSesame/smack_sl/src\smack_sl.c ****     uint32_t  i;
 117              	 .loc 1 133 5 view .LVU18
 134:C:/OpenSesame/smack_sl/src\smack_sl.c ****     /*lint -esym(550,dummy) variable dummy not accessed */
 135:C:/OpenSesame/smack_sl/src\smack_sl.c ****     uint8_t  dummy __attribute__((unused));
 118              	 .loc 1 135 5 view .LVU19
 136:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 137:C:/OpenSesame/smack_sl/src\smack_sl.c ****     for (uint8_t j = 0; j < 4; j++)
 119              	 .loc 1 137 5 view .LVU20
 120              	.LBB2:
 121              	 .loc 1 137 10 view .LVU21
 122              	 .loc 1 137 25 view .LVU22
 123              	.LBE2:
 126:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 124              	 .loc 1 126 1 is_stmt 0 view .LVU23
 125 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 126              	.LCFI0:
 127              	 .cfi_def_cfa_offset 20
 128              	 .cfi_offset 4,-20
 129              	 .cfi_offset 5,-16
 130              	 .cfi_offset 6,-12
 131              	 .cfi_offset 7,-8
 132              	 .cfi_offset 14,-4
 133              	.LBB3:
 138:C:/OpenSesame/smack_sl/src\smack_sl.c ****     {
 139:C:/OpenSesame/smack_sl/src\smack_sl.c ****         // to switch the HB switch control lines to GPIO8-GPIO11 as well
 140:C:/OpenSesame/smack_sl/src\smack_sl.c ****         set_singlegpio_alt(8 + j, 0, 3);
 134              	 .loc 1 140 9 view .LVU24
 135 0002 494D     	 ldr r5,.L15
 136              	.LBE3:
 126:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 137              	 .loc 1 126 1 view .LVU25
 138 0004 0824     	 movs r4,#8
 139              	.LBB4:
 140              	 .loc 1 140 9 view .LVU26
 141 0006 2B00     	 movs r3,r5
 142 0008 B833     	 adds r3,r3,#184
 143 000a 1B68     	 ldr r3,[r3]
 144              	.LBE4:
 126:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 145              	 .loc 1 126 1 view .LVU27
 146 000c 85B0     	 sub sp,sp,#20
 147              	.LCFI1:
 148              	 .cfi_def_cfa_offset 40
 149              	.LBB5:
 150              	 .loc 1 140 9 view .LVU28
 151 000e 0393     	 str r3,[sp,#12]
 152              	.LVL5:
 153              	.L10:
 154              	 .loc 1 140 9 is_stmt 1 discriminator 3 view .LVU29
 155 0010 2000     	 movs r0,r4
 156 0012 0322     	 movs r2,#3
 157 0014 0021     	 movs r1,#0
 158 0016 039B     	 ldr r3,[sp,#12]
 159 0018 9847     	 blx r3
 160              	.LVL6:
 141:C:/OpenSesame/smack_sl/src\smack_sl.c ****         dummy = single_gpio_iocfg( true, false, true, false, false, 8 + j);
 161              	 .loc 1 141 9 discriminator 3 view .LVU30
 162              	 .loc 1 141 17 is_stmt 0 discriminator 3 view .LVU31
 163 001a 2B00     	 movs r3,r5
 164 001c 0026     	 movs r6,#0
 165 001e 0122     	 movs r2,#1
 166 0020 A433     	 adds r3,r3,#164
 167 0022 1B68     	 ldr r3,[r3]
 168 0024 0194     	 str r4,[sp,#4]
 169 0026 0293     	 str r3,[sp,#8]
 137:C:/OpenSesame/smack_sl/src\smack_sl.c ****     {
 170              	 .loc 1 137 5 discriminator 3 view .LVU32
 171 0028 0134     	 adds r4,r4,#1
 172              	.LVL7:
 173              	 .loc 1 141 17 discriminator 3 view .LVU33
 174 002a 3300     	 movs r3,r6
 175 002c 3100     	 movs r1,r6
 176 002e 1000     	 movs r0,r2
 177 0030 029F     	 ldr r7,[sp,#8]
 178 0032 0096     	 str r6,[sp]
 137:C:/OpenSesame/smack_sl/src\smack_sl.c ****     {
 179              	 .loc 1 137 5 discriminator 3 view .LVU34
 180 0034 E4B2     	 uxtb r4,r4
 181              	 .loc 1 141 17 discriminator 3 view .LVU35
 182 0036 B847     	 blx r7
 183              	.LVL8:
 137:C:/OpenSesame/smack_sl/src\smack_sl.c ****     {
 184              	 .loc 1 137 32 is_stmt 1 discriminator 3 view .LVU36
 137:C:/OpenSesame/smack_sl/src\smack_sl.c ****     {
 185              	 .loc 1 137 25 discriminator 3 view .LVU37
 137:C:/OpenSesame/smack_sl/src\smack_sl.c ****     {
 186              	 .loc 1 137 5 is_stmt 0 discriminator 3 view .LVU38
 187 0038 0C2C     	 cmp r4,#12
 188 003a E9D1     	 bne .L10
 189              	.LBE5:
 142:C:/OpenSesame/smack_sl/src\smack_sl.c ****     }
 143:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 144:C:/OpenSesame/smack_sl/src\smack_sl.c ****     sl_counter = 0;
 190              	 .loc 1 144 5 is_stmt 1 view .LVU39
 191              	 .loc 1 144 16 is_stmt 0 view .LVU40
 192 003c 3B4B     	 ldr r3,.L15+4
 145:C:/OpenSesame/smack_sl/src\smack_sl.c ****     i = 0;
 146:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 147:C:/OpenSesame/smack_sl/src\smack_sl.c ****     set_hb_eventctrl(false);
 193              	 .loc 1 147 5 view .LVU41
 194 003e FC35     	 adds r5,r5,#252
 195 0040 3000     	 movs r0,r6
 144:C:/OpenSesame/smack_sl/src\smack_sl.c ****     i = 0;
 196              	 .loc 1 144 16 view .LVU42
 197 0042 1E60     	 str r6,[r3]
 145:C:/OpenSesame/smack_sl/src\smack_sl.c ****     i = 0;
 198              	 .loc 1 145 5 is_stmt 1 view .LVU43
 199              	.LVL9:
 200              	 .loc 1 147 5 view .LVU44
 201 0044 AB6A     	 ldr r3,[r5,#40]
 202 0046 9847     	 blx r3
 203              	.LVL10:
 148:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 149:C:/OpenSesame/smack_sl/src\smack_sl.c ****     // initialize the data exchange library
 150:C:/OpenSesame/smack_sl/src\smack_sl.c ****     vars_init();
 204              	 .loc 1 150 5 view .LVU45
 205 0048 FFF7FEFF 	 bl vars_init
 206              	.LVL11:
 151:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 152:C:/OpenSesame/smack_sl/src\smack_sl.c ****     //set_hb_switch(bool hs1_set, bool ls1_set, bool hs2_set, bool ls2_set)
 153:C:/OpenSesame/smack_sl/src\smack_sl.c ****     while (i < count)
 207              	 .loc 1 153 5 view .LVU46
 208              	 .loc 1 153 11 view .LVU47
 154:C:/OpenSesame/smack_sl/src\smack_sl.c ****     {
 155:C:/OpenSesame/smack_sl/src\smack_sl.c ****         set_hb_switch(true, false, false, false);
 209              	 .loc 1 155 9 is_stmt 0 view .LVU48
 210 004c 6E6A     	 ldr r6,[r5,#36]
 211 004e 0125     	 movs r5,#1
 150:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 212              	 .loc 1 150 5 view .LVU49
 213 0050 2134     	 adds r4,r4,#33
 214 0052 FF34     	 adds r4,r4,#255
 215              	.LVL12:
 216              	.L11:
 217              	 .loc 1 155 9 is_stmt 1 view .LVU50
 218 0054 0023     	 movs r3,#0
 219 0056 2800     	 movs r0,r5
 220 0058 1A00     	 movs r2,r3
 221 005a 1900     	 movs r1,r3
 222 005c B047     	 blx r6
 223              	.LVL13:
 156:C:/OpenSesame/smack_sl/src\smack_sl.c ****         set_hb_switch(true, false, false, true);
 224              	 .loc 1 156 9 view .LVU51
 225 005e 0022     	 movs r2,#0
 226 0060 2B00     	 movs r3,r5
 227 0062 1100     	 movs r1,r2
 228 0064 2800     	 movs r0,r5
 229 0066 B047     	 blx r6
 230              	.LVL14:
 157:C:/OpenSesame/smack_sl/src\smack_sl.c ****         sys_tim_singleshot_32(0, WAIT_ABOUT_1MS * time, 14);
 231              	 .loc 1 157 9 view .LVU52
 232 0068 0E22     	 movs r2,#14
 233 006a 0020     	 movs r0,#0
 234 006c 3049     	 ldr r1,.L15+8
 235 006e FFF7FEFF 	 bl sys_tim_singleshot_32
 236              	.LVL15:
 158:C:/OpenSesame/smack_sl/src\smack_sl.c ****         sl_counter++;
 237              	 .loc 1 158 9 view .LVU53
 238              	 .loc 1 158 19 is_stmt 0 view .LVU54
 239 0072 2E4F     	 ldr r7,.L15+4
 159:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 160:C:/OpenSesame/smack_sl/src\smack_sl.c ****         set_hb_switch(true, false, false, false);
 240              	 .loc 1 160 9 view .LVU55
 241 0074 2800     	 movs r0,r5
 158:C:/OpenSesame/smack_sl/src\smack_sl.c ****         sl_counter++;
 242              	 .loc 1 158 19 view .LVU56
 243 0076 3B68     	 ldr r3,[r7]
 153:C:/OpenSesame/smack_sl/src\smack_sl.c ****     {
 244              	 .loc 1 153 11 view .LVU57
 245 0078 013C     	 subs r4,r4,#1
 246              	.LVL16:
 158:C:/OpenSesame/smack_sl/src\smack_sl.c ****         sl_counter++;
 247              	 .loc 1 158 19 view .LVU58
 248 007a 0133     	 adds r3,r3,#1
 249 007c 3B60     	 str r3,[r7]
 250              	 .loc 1 160 9 is_stmt 1 view .LVU59
 251 007e 0023     	 movs r3,#0
 252 0080 1A00     	 movs r2,r3
 253 0082 1900     	 movs r1,r3
 254 0084 B047     	 blx r6
 255              	.LVL17:
 161:C:/OpenSesame/smack_sl/src\smack_sl.c ****         set_hb_switch(true, false, true, false);
 256              	 .loc 1 161 9 view .LVU60
 257 0086 0023     	 movs r3,#0
 258 0088 2A00     	 movs r2,r5
 259 008a 1900     	 movs r1,r3
 260 008c 2800     	 movs r0,r5
 261 008e B047     	 blx r6
 262              	.LVL18:
 162:C:/OpenSesame/smack_sl/src\smack_sl.c ****         sys_tim_singleshot_32(0, WAIT_ABOUT_1MS * time, 14);
 263              	 .loc 1 162 9 view .LVU61
 264 0090 0E22     	 movs r2,#14
 265 0092 0020     	 movs r0,#0
 266 0094 2649     	 ldr r1,.L15+8
 267 0096 FFF7FEFF 	 bl sys_tim_singleshot_32
 268              	.LVL19:
 163:C:/OpenSesame/smack_sl/src\smack_sl.c ****         sl_counter++;
 269              	 .loc 1 163 9 view .LVU62
 270              	 .loc 1 163 19 is_stmt 0 view .LVU63
 271 009a 3B68     	 ldr r3,[r7]
 164:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 165:C:/OpenSesame/smack_sl/src\smack_sl.c ****         set_hb_switch(false, false, true, false);
 272              	 .loc 1 165 9 view .LVU64
 273 009c 2A00     	 movs r2,r5
 163:C:/OpenSesame/smack_sl/src\smack_sl.c ****         sl_counter++;
 274              	 .loc 1 163 19 view .LVU65
 275 009e 0133     	 adds r3,r3,#1
 276 00a0 3B60     	 str r3,[r7]
 277              	 .loc 1 165 9 is_stmt 1 view .LVU66
 278 00a2 0023     	 movs r3,#0
 279 00a4 1900     	 movs r1,r3
 280 00a6 1800     	 movs r0,r3
 281 00a8 B047     	 blx r6
 282              	.LVL20:
 166:C:/OpenSesame/smack_sl/src\smack_sl.c ****         set_hb_switch(false, true, true, false);
 283              	 .loc 1 166 9 view .LVU67
 284 00aa 0023     	 movs r3,#0
 285 00ac 2A00     	 movs r2,r5
 286 00ae 1800     	 movs r0,r3
 287 00b0 2900     	 movs r1,r5
 288 00b2 B047     	 blx r6
 289              	.LVL21:
 167:C:/OpenSesame/smack_sl/src\smack_sl.c ****         sys_tim_singleshot_32(0, WAIT_ABOUT_1MS * time, 14);
 290              	 .loc 1 167 9 view .LVU68
 291 00b4 0E22     	 movs r2,#14
 292 00b6 0020     	 movs r0,#0
 293 00b8 1D49     	 ldr r1,.L15+8
 294 00ba FFF7FEFF 	 bl sys_tim_singleshot_32
 295              	.LVL22:
 168:C:/OpenSesame/smack_sl/src\smack_sl.c ****         sl_counter++;
 296              	 .loc 1 168 9 view .LVU69
 297              	 .loc 1 168 19 is_stmt 0 view .LVU70
 298 00be 3B68     	 ldr r3,[r7]
 169:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 170:C:/OpenSesame/smack_sl/src\smack_sl.c ****         set_hb_switch(false, false, true, false);
 299              	 .loc 1 170 9 view .LVU71
 300 00c0 2A00     	 movs r2,r5
 168:C:/OpenSesame/smack_sl/src\smack_sl.c ****         sl_counter++;
 301              	 .loc 1 168 19 view .LVU72
 302 00c2 0133     	 adds r3,r3,#1
 303 00c4 3B60     	 str r3,[r7]
 304              	 .loc 1 170 9 is_stmt 1 view .LVU73
 305 00c6 0023     	 movs r3,#0
 306 00c8 1900     	 movs r1,r3
 307 00ca 1800     	 movs r0,r3
 308 00cc B047     	 blx r6
 309              	.LVL23:
 171:C:/OpenSesame/smack_sl/src\smack_sl.c ****         set_hb_switch(true, false, true, false);
 310              	 .loc 1 171 9 view .LVU74
 311 00ce 0023     	 movs r3,#0
 312 00d0 2A00     	 movs r2,r5
 313 00d2 1900     	 movs r1,r3
 314 00d4 2800     	 movs r0,r5
 315 00d6 B047     	 blx r6
 316              	.LVL24:
 172:C:/OpenSesame/smack_sl/src\smack_sl.c ****         sys_tim_singleshot_32(0, WAIT_ABOUT_1MS * time, 14);
 317              	 .loc 1 172 9 view .LVU75
 318 00d8 0E22     	 movs r2,#14
 319 00da 0020     	 movs r0,#0
 320 00dc 1449     	 ldr r1,.L15+8
 321 00de FFF7FEFF 	 bl sys_tim_singleshot_32
 322              	.LVL25:
 173:C:/OpenSesame/smack_sl/src\smack_sl.c ****         sl_counter++;
 323              	 .loc 1 173 9 view .LVU76
 324              	 .loc 1 173 19 is_stmt 0 view .LVU77
 325 00e2 3B68     	 ldr r3,[r7]
 326 00e4 0133     	 adds r3,r3,#1
 327 00e6 3B60     	 str r3,[r7]
 174:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 175:C:/OpenSesame/smack_sl/src\smack_sl.c ****         i++;
 328              	 .loc 1 175 9 is_stmt 1 view .LVU78
 329              	.LVL26:
 153:C:/OpenSesame/smack_sl/src\smack_sl.c ****     {
 330              	 .loc 1 153 11 view .LVU79
 331 00e8 002C     	 cmp r4,#0
 332 00ea B3D1     	 bne .L11
 176:C:/OpenSesame/smack_sl/src\smack_sl.c ****     }
 177:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 178:C:/OpenSesame/smack_sl/src\smack_sl.c ****     set_hb_switch(false, false, false, false);
 333              	 .loc 1 178 5 view .LVU80
 334 00ec 2300     	 movs r3,r4
 335 00ee 2200     	 movs r2,r4
 336 00f0 2100     	 movs r1,r4
 337 00f2 2000     	 movs r0,r4
 338 00f4 B047     	 blx r6
 339              	.LVL27:
 179:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 180:C:/OpenSesame/smack_sl/src\smack_sl.c ****     // ****************** END BLINKING DEMO ********************
 181:C:/OpenSesame/smack_sl/src\smack_sl.c ****     single_gpio_iocfg(true, false, true, false, false, 0);
 340              	 .loc 1 181 5 view .LVU81
 341 00f6 0122     	 movs r2,#1
 342 00f8 2300     	 movs r3,r4
 343 00fa 1000     	 movs r0,r2
 344 00fc 2100     	 movs r1,r4
 345 00fe 029D     	 ldr r5,[sp,#8]
 346 0100 0194     	 str r4,[sp,#4]
 347 0102 0094     	 str r4,[sp]
 348 0104 A847     	 blx r5
 349              	.LVL28:
 182:C:/OpenSesame/smack_sl/src\smack_sl.c ****     set_singlegpio_out(0x1, 0);
 350              	 .loc 1 182 5 view .LVU82
 351 0106 084B     	 ldr r3,.L15
 352 0108 2100     	 movs r1,r4
 353 010a AC33     	 adds r3,r3,#172
 354 010c 0120     	 movs r0,#1
 355 010e 1D68     	 ldr r5,[r3]
 356 0110 A847     	 blx r5
 357              	.LVL29:
 183:C:/OpenSesame/smack_sl/src\smack_sl.c ****     sys_tim_singleshot_32(0, WAIT_ABOUT_1MS * 3000, 14);
 358              	 .loc 1 183 5 view .LVU83
 359 0112 2000     	 movs r0,r4
 360 0114 0749     	 ldr r1,.L15+12
 361 0116 0E22     	 movs r2,#14
 362 0118 FFF7FEFF 	 bl sys_tim_singleshot_32
 363              	.LVL30:
 184:C:/OpenSesame/smack_sl/src\smack_sl.c ****     set_singlegpio_out(0x0, 0);
 364              	 .loc 1 184 5 view .LVU84
 365 011c 2100     	 movs r1,r4
 366 011e 2000     	 movs r0,r4
 367 0120 A847     	 blx r5
 368              	.LVL31:
 369              	.L12:
 185:C:/OpenSesame/smack_sl/src\smack_sl.c **** 
 186:C:/OpenSesame/smack_sl/src\smack_sl.c ****     // background task is just an endless
 187:C:/OpenSesame/smack_sl/src\smack_sl.c ****     /*lint -e(716) while(1) */
 188:C:/OpenSesame/smack_sl/src\smack_sl.c ****     while (true)
 370              	 .loc 1 188 5 discriminator 1 view .LVU85
 189:C:/OpenSesame/smack_sl/src\smack_sl.c ****     {
 190:C:/OpenSesame/smack_sl/src\smack_sl.c ****         /*
 191:C:/OpenSesame/smack_sl/src\smack_sl.c ****         // Uncomment these lines if you want to output data on pin 1
 192:C:/OpenSesame/smack_sl/src\smack_sl.c ****         SCUS_GPIO_OUT_EN__SET(1);
 193:C:/OpenSesame/smack_sl/src\smack_sl.c ****         SCUC_GPIO_OUT_DAT__SET(0x1 & BIT_TO_PUT_ON_PIN);
 194:C:/OpenSesame/smack_sl/src\smack_sl.c ****         */
 195:C:/OpenSesame/smack_sl/src\smack_sl.c ****         asm("WFI");
 371              	 .loc 1 195 9 discriminator 1 view .LVU86
 372              	 .syntax divided
 373              	
 374 0122 30BF     	 WFI
 375              	
 188:C:/OpenSesame/smack_sl/src\smack_sl.c ****     {
 376              	 .loc 1 188 11 discriminator 1 view .LVU87
 377              	 .thumb
 378              	 .syntax unified
 379 0124 FDE7     	 b .L12
 380              	.L16:
 381 0126 C046     	 .align 2
 382              	.L15:
 383 0128 00000000 	 .word rom_func_table
 384 012c 00000000 	 .word .LANCHOR1
 385 0130 0080FF00 	 .word 16744448
 386 0134 0000DC05 	 .word 98304000
 387              	 .cfi_endproc
 388              	.LFE45:
 390              	 .global sl_counter
 391              	 .global smack_sl_tag
 392              	 .section .bss.example_counter,"aw",%nobits
 393              	 .align 2
 394              	 .set .LANCHOR0,.+0
 397              	example_counter:
 398 0000 00000000 	 .space 4
 399              	 .section .bss.sl_counter,"aw",%nobits
 400              	 .align 2
 401              	 .set .LANCHOR1,.+0
 404              	sl_counter:
 405 0000 00000000 	 .space 4
 406              	 .section .rodata.smack_sl_tag,"a"
 409              	smack_sl_tag:
 410 0000 05C0BEEF 	 .ascii "\005\300\276\357\336\255\000\000\377\377\377\377\341"
 410      DEAD0000 
 410      FFFFFFFF 
 410      E1
 411 000d 100B0F03 	 .ascii "\020\013\017\003O\321\001KT\002enInfineon Technolog"
 411      4FD1014B 
 411      5402656E 
 411      496E6669 
 411      6E656F6E 
 412 002b 69657320 	 .ascii "ies AG  NGC1080  SmAcK  05C0BEEFDEAD0000  V4.0.1 (N"
 412      41472020 
 412      4E474331 
 412      30383020 
 412      20536D41 
 413 005e 564D29FE 	 .ascii "VM)\376\377\377\377\377\377\377"
 413      FFFFFFFF 
 413      FFFF
 414              	 .text
 415              	.Letext0:
 416              	 .file 2 "c:\\opensesame\\tools\\extern\\gcc-arm-none-eabi\\arm-none-eabi\\include\\machine\\_default_types.h"
 417              	 .file 3 "c:\\opensesame\\tools\\extern\\gcc-arm-none-eabi\\arm-none-eabi\\include\\sys\\_stdint.h"
 418              	 .file 4 "C:/OpenSesame/smack_rom/libs/smack_lib/inc/aes_drv.h"
 419              	 .file 5 "C:/OpenSesame/smack_rom/libs/smack_lib/inc/aparam.h"
 420              	 .file 6 "C:/OpenSesame/smack_rom/libs/smack_lib/inc/dand_handler.h"
 421              	 .file 7 "C:/OpenSesame/smack_rom/libs/smack_lib/inc/dparam.h"
 422              	 .file 8 "C:/OpenSesame/smack_rom/libs/smack_lib/inc/hbctrl_drv.h"
 423              	 .file 9 "C:/OpenSesame/smack_rom/libs/smack_lib/inc/hwdiv.h"
 424              	 .file 10 "C:/OpenSesame/smack_rom/libs/smack_lib/inc/nfc_handler.h"
 425              	 .file 11 "C:/OpenSesame/smack_rom/libs/smack_lib/inc/nvm.h"
 426              	 .file 12 "C:/OpenSesame/smack_rom/libs/smack_lib/inc/pmu.h"
 427              	 .file 13 "C:/OpenSesame/smack_rom/libs/smack_lib/inc/sense_ctrl.h"
 428              	 .file 14 "C:/OpenSesame/smack_rom/libs/smack_lib/inc/ssp_drv.h"
 429              	 .file 15 "C:/OpenSesame/smack_rom/libs/smack_lib/inc/sys_tim_drv.h"
 430              	 .file 16 "C:/OpenSesame/smack_rom/libs/smack_lib/inc/uart_drv.h"
 431              	 .file 17 "C:/OpenSesame/smack_rom/libs/smack_lib/inc/wdt.h"
 432              	 .file 18 "C:/OpenSesame/smack_rom/libs/smack_lib/inc/rom_lib.h"
 433              	 .file 19 "C:/OpenSesame/smack_sl/inc/smack_sl.h"
 434              	 .file 20 "C:/OpenSesame/smack_sl/inc/smack_dataexchange.h"
 435              	 .file 21 "C:/OpenSesame/smack_lib/inc/sys_tim_lib.h"
DEFINED SYMBOLS
                            *ABS*:00000000 smack_sl.c
    {standard input}:16     .text.example_handler:00000000 $t
    {standard input}:24     .text.example_handler:00000000 example_handler
    {standard input}:46     .text.example_handler:0000000c $d
    {standard input}:51     .text.hardfault_handler:00000000 $t
    {standard input}:58     .text.hardfault_handler:00000000 hardfault_handler
    {standard input}:95     .text.hardfault_handler:00000010 $d
    {standard input}:100    .text._nvm_start:00000000 $t
    {standard input}:107    .text._nvm_start:00000000 _nvm_start
    {standard input}:383    .text._nvm_start:00000128 $d
    {standard input}:404    .bss.sl_counter:00000000 sl_counter
    {standard input}:409    .rodata.smack_sl_tag:00000000 smack_sl_tag
    {standard input}:393    .bss.example_counter:00000000 $d
    {standard input}:397    .bss.example_counter:00000000 example_counter
    {standard input}:400    .bss.sl_counter:00000000 $d

UNDEFINED SYMBOLS
vars_init
sys_tim_singleshot_32
rom_func_table
